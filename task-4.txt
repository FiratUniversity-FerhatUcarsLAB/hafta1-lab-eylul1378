Öğrenci No:250541001
AD-SOYAD:Nihal Eylül İL

FONKSIYON AdilPaylasim(Kisiler_Listesi, Pasta):
    // Kişi sayısını al
    N = Kisiler_Listesi'nin eleman sayısı

    // -----------------------------------------------------------------
    // TEMEL DURUM 1: Tek kişi varsa pastanın tamamını alır.
    // -----------------------------------------------------------------
    EĞER N == 1:
        paylar = { Kisiler_Listesi[0] : Pasta }
        DÖNDÜR paylar

    // -----------------------------------------------------------------
    // TEMEL DURUM 2: İki kişi varsa "Kes ve Seç" yöntemi uygulanır.
    // -----------------------------------------------------------------
    EĞER N == 2:
        Kesen_Kisi = Kisiler_Listesi[0]
        Secen_Kisi = Kisiler_Listesi[1]

        // Kesen kişi pastayı kendine göre 2 eşit parçaya böler
        (Parca_A, Parca_B) = Kesen_Kisi.KendiDegerineGoreEsitKes(Pasta, 2)

        // Seçen kişi bu iki parçadan daha değerli bulduğunu seçer
        Secilen_Parca = Secen_Kisi.EnDegerliParcayiSec([Parca_A, Parca_B])

        EĞER Secilen_Parca == Parca_A:
            paylar = { Secen_Kisi : Parca_A, Kesen_Kisi : Parca_B }
        DEĞİLSE:
            paylar = { Secen_Kisi : Parca_B, Kesen_Kisi : Parca_A }

        DÖNDÜR paylar

    // -----------------------------------------------------------------
    // YİNELEMELİ ADIM: Kişi sayısı 2'den fazlaysa
    // -----------------------------------------------------------------
    EĞER N > 2:
        // Adım 1: Gruptan bir kişiyi "Seçici", diğerlerini "Bölenler" olarak ayır.
        Secici = Kisiler_Listesi'nin son elemanı
        Bolenler = Kisiler_Listesi'nin ilk N-1 elemanı

        // Adım 2: (N-1) kişilik "Bölenler" grubu için fonksiyonu özyinelemeli olarak çağır.
        // Bu grup, pastanın tamamını kendi aralarında adil şekilde paylaşır.
        Gecici_Paylar = AdilPaylasim(Bolenler, Pasta)

        // Adım 3: "Seçici"nin payını belirlemek için birleştirme adımı.
        Nihai_Paylar = yeni bir boş sözlük oluştur
        Secici_icin_toplanan_parcalar = boş bir liste oluştur

        // Her bir bölen, kendi geçici payını N eşit parçaya böler.
        HER Bolen in Bolenler:
            // Bölen'in özyinelemeli çağrıdan aldığı pay
            Bolenin_gecici_payi = Gecici_Paylar[Bolen]

            // Kendi payını, kendine göre N eşit alt parçaya böler
            Alt_Parcalar = Bolen.KendiDegerineGoreEsitKes(Bolenin_gecici_payi, N)

            // "Seçici", bu alt parçalardan en değerli bulduğunu seçer
            Secicinin_sectigi_parca = Secici.EnDegerliParcayiSec(Alt_Parcalar)
            
            // Seçilen parçayı "Seçici"nin koleksiyonuna ekle
            Secici_icin_toplanan_parcalar.ekle(Secicinin_sectigi_parca)

            // Geriye kalan N-1 alt parçayı birleştirerek "Bölen"in nihai payını oluştur
            Alt_Parcalar.kaldır(Secicinin_sectigi_parca)
            Nihai_Paylar[Bolen] = Alt_Parcalar.birleştir()

        // "Seçici"nin farklı bölenlerden topladığı tüm küçük parçaları birleştir.
        Nihai_Paylar[Secici] = Secici_icin_toplanan_parcalar.birleştir()
        
        // Herkesin nihai payını içeren sözlüğü döndür.
        DÖNDÜR Nihai_Paylar

      =YAPAY ZEKA KONUŞMALARI=

1. Etkileşim:

Kullanıcı Talebi: N kişi için "Böl ve Fethet" yaklaşımıyla adil pasta paylaşımı algoritmasının açıklanması.

AI Yanıtının Konusu: Problemi N kişiden (N-1) kişiye indirgeyen Yinelemeli Tek Seçici (Recursive Lone Chooser) algoritması adımları, mantığı ve örnekle açıklandı.

2. Etkileşim:

Kullanıcı Talebi: Açıklanan algoritmanın sözde kodunun (pseudocode) yazılması.

AI Yanıtının Konusu: Algoritmanın temel ve yinelemeli adımlarını içeren detaylı bir sözde kod sunuldu.


    
