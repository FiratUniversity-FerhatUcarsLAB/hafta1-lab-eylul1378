Öğrenci No:250541001
AD-SOYAD:Nihal Eylül İL

Fonksiyon: BulHedefRenk(renkListesi, hedefRenk)
    Eğer renkListesi boyutu 1 ise:
        Eğer renkListesi[0] hedefRenk'e eşitse:
            Dön: True
        Değilse:
            Dön: False

    Listeyi ikiye böl:
        solListe = renkListesi[0 .. n/2]
        sagListe = renkListesi[n/2+1 .. n]

    Sol ve sağ listeyi ayrı ayrı çöz:
        solSonuc = BulHedefRenk(solListe, hedefRenk)
        sagSonuc = BulHedefRenk(sagListe, hedefRenk)

    Eğer solSonuc veya sagSonuc True ise:
        Dön: True

    Tüm sol ve sağ renk kombinasyonlarını dene:
        Her renk1 in solListe:
            Her renk2 in sagListe:
                karisim = Karistir(renk1, renk2)
                Eğer karisim hedefRenk'e yeterince yakınsa:
                    Dön: True
                    Dön: False

Fonksiyon: Karistir(renk1, renk2)
    Renkler RGB formatında ise:
        R = (renk1.R + renk2.R) / 2
        G = (renk1.G + renk2.G) / 2
        B = (renk1.B + renk2.B) / 2
    Dön: (R, G, B)

Fonksiyon: YeterinceYakin(renkA, renkB, tolerans)
    fark = sqrt((A.R - B.R)^2 + (A.G - B.G)^2 + (A.B - B.B)^2)
    Eğer fark < tolerans ise:
        Dön: True
    Aksi halde:
        Dön: False

Bu bölümde, hedef bir rengi elde etmek için verilen renklerin karıştırılması problemi, Divide & Conquer (Böl ve Fethet) algoritik yaklaşımıyla ele alınmıştır. 
Diyalogda, algoritmanın sözde kodu detaylı şekilde açıklanmış ve renk karıştırma işlemi RGB formatında tanımlanmıştır. Ayrıca, renklerin hedef renge olan yakınlığı 
bir tolerans değeriyle kontrol edilmiştir.






