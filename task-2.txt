Öğrenci No:250541001
AD-SOYAD:Nihal Eylül İL

// =================================================================
// ANA FONKSİYON: Bilgisayarın sırası geldiğinde en iyi hamleyi bulur.
// =================================================================
FONKSİYON BilgisayarHamlesiniBelirle(Tahta, BilgisayarınSembolü):

  // ---- 1. Öncelik: KAZAN! ----
  // Eğer tek bir hamle ile kazanabiliyorsam, o hamleyi yap.
  kazanmaHamlesi = KazanmaHareketiBul(Tahta, BilgisayarınSembolü)
  EĞER (kazanmaHamlesi != Yok) İSE
    DÖN kazanmaHamlesi // Düşünmeyi bırak ve kazanma hamlesini oyna.
  BİTİR EĞER


  // ---- 2. Öncelik: ENGELLE! ----
  // Eğer rakip bir sonraki hamlede kazanabiliyorsa, onu engelle.
  // Bu, "rakip hamlesini öngörme" adımının en kritik parçasıdır.
  RakibinSembolü = (BilgisayarınSembolü == 'X') ? 'O' : 'X'
  engellemeHamlesi = KazanmaHareketiBul(Tahta, RakibinSembolü)
  EĞER (engellemeHamlesi != Yok) İSE
    DÖN engellemeHamlesi // Rakibin kazanmasını engellemek için o noktayı oyna.
  BİTİR EĞER


  // ---- 3. Öncelik: STRATEJİK KONUMLARI AL! ----
  // Eğer anlık bir kazanma veya kaybetme durumu yoksa, stratejik olarak en güçlü
  // pozisyonları almaya çalış.

  // 3a: Merkezi al. Merkez (1,1) en stratejik karedir.
  EĞER (Tahta[1][1] == 'Boş') İSE
    DÖN (1, 1) // Merkezi koordinatları döndür.
  BİTİR EĞER

  // 3b: Rakibin köşesine karşılık zıt köşeyi al. Bu, rakibin çapraz
  // tehditlerini engeller ve kendi lehimize fırsat yaratır.
  zıtKose = ZıtKoseBul(Tahta, RakibinSembolü)
  EĞER (zıtKose != Yok) İSE
      DÖN zıtKose
  BİTİR EĞER
  
  // 3c: Boş bir köşe al. Köşeler kenarlardan daha değerlidir.
  bosKose = BosKoseBul(Tahta)
  EĞER (bosKose != Yok) İSE
    DÖN bosKose
  BİTİR EĞER

  // 3d: Boş bir kenar (orta) al. Diğer tüm seçenekler tükendiğinde oynanır.
  bosKenar = BosKenarBul(Tahta)
  EĞER (bosKenar != Yok) İSE
    DÖN bosKenar
  BİTİR EĞER

  // Hiçbir hamle kalmadıysa (teorik olarak bu adıma ulaşılmaz)
  DÖN Yok

BİTİR FONKSİYON


// =================================================================
// YARDIMCI FONKSİYONLAR
// =================================================================

// Belirtilen oyuncunun bir sonraki hamlede kazanabileceği bir yer olup olmadığını kontrol eder.
// Varsa, o hamlenin koordinatlarını döndürür. Yoksa, "Yok" döndürür.
FONKSİYON KazanmaHareketiBul(Tahta, OyuncuSembolü):
  // 8 olası kazanma hattını (3 satır, 3 sütun, 2 çapraz) kontrol et.
  DÖNGÜ (her bir kazanma hattı için):
    // Eğer hatta bu oyuncunun 2 sembolü ve 1 boş alan varsa:
    EĞER (HattaIkiAyniVeBirBosVarsa(hat, OyuncuSembolü)) İSE
      // O boş alanın koordinatlarını bul ve döndür.
      DÖN bosAlanınKoordinatı
    BİTİR EĞER
  BİTİR DÖNGÜ

  // Hiçbir hatta kazanma hamlesi bulunamadı.
  DÖN Yok
BİTİR FONKSİYON

// Diğer yardımcı fonksiyonlar (ZıtKoseBul, BosKoseBul, BosKenarBul) benzer şekilde
// tahtayı tarayarak ilgili boş kareleri bulur ve koordinatlarını döndürür.

    =YAPAY ZEKA KONUŞMALARI=
Ödevim için, Tic-Tac-Toe oyununda karar verme mantığını ve rakibin hamlelerini öngörerek engelleme stratejisini içeren bir algoritma talep ettim. Gemini, bu talebe 
yanıt olarak, belirli bir öncelik sırasıyla çalışan bir sözde kod hazırladı. Bu algoritmaya göre bilgisayar; önce kendi kazanma hamlesini arıyor, bulamazsa rakibin 
kazanma hamlesini engelliyor ve son olarak da merkez gibi stratejik konumları tercih ederek en optimal hamleyi yapıyor.
